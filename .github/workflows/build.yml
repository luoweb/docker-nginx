name: Build Images

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  # schedule:
  #   - cron: '0 3 * * *'
  push:
    branches: [ "main", "master" ]

env:
  # Use docker.io for Docker Hub if empty
  # REGISTRY: registry.us-west-1.aliyuncs.com
  # REGISTRY: registry.cn-hangzhou.aliyuncs.com
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  # IMAGE_NAME: roweb/chatapp
  IMAGE_NAME: luoweb/docker-nginx
  TZ: Asia/Shanghai

  # tell nginx's build system where to find LuaJIT 2.1:
  LUAJIT_LIB: /usr/lib
  LUAJIT_INC: /usr/include/nginx-luajit-2.1

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%d')"

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Log into registry ${{ env.IMAGE_REGISTRY }}
      #   if: github.event_name != 'pull_request'
      #   uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
      #   with:
      #     registry: ${{ env.IMAGE_REGISTRY }}
      #     username: ${{ secrets.DOCKERHUB2_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB2_PASSWORD }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule,pattern=nightly-{{date 'YYYYMMDDhhmmss'}}
            type=schedule,pattern=latest
            type=sha,format=short

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker Hub1
        id: build-and-push1
        #导入这个模块来完成自动编译和推送
        uses: docker/build-push-action@v3
        with:
          context: ./modules
          push: ${{ github.event_name != 'pull_request' }}
          #在这里通过加入需要编译的平台和前面配好的QEMU，buildx来达到多平台编译
          platforms: linux/amd64,linux/arm64
          #指定用户/仓库名
          build-args: |
            NGINX_FROM_IMAGE=nginx:1.25.2
            ENABLED_MODULES=lua lua-nginx-module nginx_upstream_check_module
          # ENABLED_MODULES=ndk lua lua-nginx-module nginx_upstream_check_module
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.date.outputs.date }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Check
        shell: bash
        env:
          DOCKER_ORG: registry.cn-hangzhou.aliyuncs.com/roweb
        run: |
          docker images
          docker run --rm -it ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.date.outputs.date }} nginx -V
          
      # - name: Build and push Docker Hub2
      #   id: build-and-push2
      #   #导入这个模块来完成自动编译和推送
      #   uses: docker/build-push-action@v3
      #   with:
      #     context: .
      #     push: ${{ github.event_name != 'pull_request' }}
      #     #在这里通过加入需要编译的平台和前面配好的QEMU，buildx来达到多平台编译
      #     platforms: linux/amd64,linux/arm64
      #     #指定用户/仓库名
      #     tags: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_FULL_URL }}
      #     labels: ${{ steps.meta.outputs.labels }}
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max

